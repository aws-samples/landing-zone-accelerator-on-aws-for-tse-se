centralSecurityServices:
  delegatedAdminAccount: Audit
  ebsDefaultVolumeEncryption:
    enable: true
    excludeRegions:
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-south-1
      - ap-southeast-1
      - ap-southeast-2
      - eu-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - sa-east-1
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
  scpRevertChangesConfig:
    enable: true
    snsTopicName: SecurityHigh
  s3PublicAccessBlock:
    enable: true
    excludeAccounts: []
  macie:
    enable: true
    excludeRegions:
      - ca-west-1 # does not support macie
    policyFindingsPublishingFrequency: FIFTEEN_MINUTES
    publishSensitiveDataFindings: true
  guardduty:
    enable: true
    excludeRegions: []
    s3Protection:
      enable: true
      excludeRegions: []
    eksProtection:
      enable: true
      excludeRegions: []
    exportConfiguration:
      enable: true
      destinationType: S3
      exportFrequency: FIFTEEN_MINUTES
  auditManager:
    enable: false
    excludeRegions:
      - ca-west-1 # Does not support Audit Manager
      - eu-west-3 # Does not support Audit Manager
      - ap-northeast-2 # Does not support Audit Manager
      - ap-northeast-3 # Does not support Audit Manager
      - eu-north-1 # Does not support Audit Manager
      - sa-east-1 # Does not support Audit Manager
    defaultReportsConfiguration:
      enable: true
      destinationType: S3
  detective:
    enable: false
    excludeRegions: []
  securityHub:
    enable: true
    regionAggregation: true
    excludeRegions: []
    snsTopicName: SecurityHigh
    notificationLevel: HIGH
    standards:
      - name: AWS Foundational Security Best Practices v1.0.0
        enable: true
        controlsToDisable:
          - IAM.1
          - EC2.10
          - Lambda.4
      - name: CIS AWS Foundations Benchmark v3.0.0
        enable: true
      - name: NIST Special Publication 800-53 Revision 5
        enable: true
      - name: PCI DSS v3.2.1
        enable: false
      - name: CIS AWS Foundations Benchmark v1.2.0
        enable: false
    logging:
      cloudWatch:
        enable: true
  ssmAutomation:
    excludeRegions:
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-south-1
      - ap-southeast-1
      - ap-southeast-2
      - eu-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - sa-east-1
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
    documentSets:
      - shareTargets:
          organizationalUnits:
            - Security
            - Infrastructure
            - Central
            - Dev
            - Test
            - Prod
            - UnClass
            - Sandbox
          accounts:
            - Management
        documents:
          # Calls the AWS CLI to enable access logs on a specified ELB
          - name: "{{ AcceleratorPrefix }}-SSM-ELB-Enable-Logging"
            template: ssm-documents/ssm-elb-enable-logging.yaml
          # Enables S3 encryption using KMS
          - name: "{{ AcceleratorPrefix }}-Put-S3-Encryption"
            template: ssm-documents/s3-encryption.yaml
          # Attaches instance profiles to an EC2 instance
          - name: "{{ AcceleratorPrefix }}-Attach-IAM-Instance-Profile"
            template: ssm-documents/attach-iam-instance-profile.yaml
          # Attaches Aws IAM Managed Policy to IAM Role
          - name: "{{ AcceleratorPrefix }}-Attach-IAM-Role-Policy"
            template: ssm-documents/attach-iam-role-policy.yaml
          # Enforces HTTPS on S3 Buckets
          - name: "{{ AcceleratorPrefix }}-S3-Enforce-HTTPS"
            template: ssm-documents/s3-enforce-https.yaml
accessAnalyzer:
  enable: true
iamPasswordPolicy:
  allowUsersToChangePassword: true
  hardExpiry: true
  requireUppercaseCharacters: true
  requireLowercaseCharacters: true
  requireSymbols: true
  requireNumbers: true
  minimumPasswordLength: 14
  passwordReusePrevention: 24
  maxPasswordAge: 90
awsConfig:
  enableConfigurationRecorder: true
  enableDeliveryChannel: true
  ## If using Control Tower, remove the following block as Control Tower already creates a config aggregator
  ## BEGIN
  aggregation:
    enable: true
    delegatedAdminAccount: Audit
  ## END
  ruleSets:
    - deploymentTargets:
        ## GLOBAL Section for config rules across all OUs + Management Account.
        ## Applicable to all regions with workloads
        organizationalUnits:
          - Security
          - Infrastructure
          - Central
          - Dev
          - Test
          - Prod
          - UnClass
          - Sandbox
        accounts:
          - Management
        excludedRegions:
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-south-1
          - ap-southeast-1
          - ap-southeast-2
          - eu-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - sa-east-1
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
      rules:
        - name: "{{ AcceleratorPrefix }}-s3-bucket-server-side-encryption-enabled"
          identifier: S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED
          complianceResourceTypes:
            - AWS::S3::Bucket
          remediation:
            rolePolicyFile: custom-config-rules/bucket-sse-enabled-remediation-role.json
            automatic: true
            targetId: "{{ AcceleratorPrefix }}-Put-S3-Encryption"
            retryAttemptSeconds: 60
            maximumAutomaticAttempts: 5
            parameters:
              - name: BucketName
                value: RESOURCE_ID
                type: String
              - name: KMSMasterKey
                value: ${ACCEL_LOOKUP::KMS}
                type: StringList
        - name: "{{ AcceleratorPrefix }}-s3-bucket-enforce-https"
          identifier: S3_BUCKET_SSL_REQUESTS_ONLY
          complianceResourceTypes:
            - AWS::S3::Bucket
          remediation:
            rolePolicyFile: custom-config-rules/bucket-enforce-https-remediation-role.json
            automatic: true
            targetId: "{{ AcceleratorPrefix }}-S3-Enforce-HTTPS"
            retryAttemptSeconds: 60
            maximumAutomaticAttempts: 5
            parameters:
              - name: BucketName
                value: RESOURCE_ID
                type: String
        - name: "{{ AcceleratorPrefix }}-attach-ec2-instance-profile"
          type: Custom
          description: Custom rule for checking EC2 instance IAM profile attachment
          inputParameters:
          customRule:
            lambda:
              sourceFilePath: custom-config-rules/attach-ec2-instance-profile.zip
              handler: index.handler
              runtime: nodejs18.x
              rolePolicyFile: custom-config-rules/attach-ec2-instance-profile-detection-role.json
            periodic: true
            maximumExecutionFrequency: Six_Hours
            configurationChanges: true
            triggeringResources:
              lookupType: ResourceTypes
              lookupKey: ResourceTypes
              lookupValue:
                - AWS::EC2::Instance
          remediation:
            rolePolicyFile: custom-config-rules/attach-ec2-instance-profile-remediation-role.json
            automatic: true
            targetId: "{{ AcceleratorPrefix }}-Attach-IAM-Instance-Profile"
            retryAttemptSeconds: 60
            maximumAutomaticAttempts: 5
            parameters:
              - name: InstanceId
                value: RESOURCE_ID
                type: String
              - name: IamInstanceProfile
                value: ${ACCEL_LOOKUP::InstanceProfile:EC2-Default-SSM-AD-Role}
                type: StringList
        - name: "{{ AcceleratorPrefix }}-ec2-instance-profile-permission"
          type: Custom
          description: Custom role to remediate EC2 instance profile permission
          inputParameters:
            AWSManagedPolicies: AmazonSSMManagedInstanceCore,AmazonSSMDirectoryServiceAccess,CloudWatchAgentServerPolicy
            CustomerManagedPolicies: "{{ AcceleratorPrefix }}-Default-SSM-S3-Policy"
            ResourceId: RESOURCE_ID
          customRule:
            lambda:
              sourceFilePath: custom-config-rules/ec2-instance-profile-permissions.zip
              handler: index.handler
              runtime: nodejs18.x
              rolePolicyFile: custom-config-rules/ec2-instance-profile-permissions-detection-role.json
            periodic: true
            maximumExecutionFrequency: Six_Hours
            configurationChanges: true
            triggeringResources:
              lookupType: ResourceTypes
              lookupKey: ResourceTypes
              lookupValue:
                - AWS::IAM::Role
          remediation:
            rolePolicyFile: custom-config-rules/ec2-instance-profile-permissions-remediation-role.json
            automatic: true
            targetId: "{{ AcceleratorPrefix }}-Attach-IAM-Role-Policy"
            targetAccountName: Audit
            retryAttemptSeconds: 60
            maximumAutomaticAttempts: 5
            parameters:
              - name: ResourceId
                value: RESOURCE_ID
                type: String
              - name: AWSManagedPolicies
                value: AmazonSSMManagedInstanceCore,AmazonSSMDirectoryServiceAccess,CloudWatchAgentServerPolicy
                type: StringList
              - name: CustomerManagedPolicies
                value: "{{ AcceleratorPrefix }}-Default-SSM-S3-Policy"
                type: StringList
        - name: "{{ AcceleratorPrefix }}-elb-logging-enabled"
          identifier: ELB_LOGGING_ENABLED
          complianceResourceTypes:
            - AWS::ElasticLoadBalancing::LoadBalancer
            - AWS::ElasticLoadBalancingV2::LoadBalancer
          inputParameters:
            s3BucketNames: ${ACCEL_LOOKUP::Bucket:elbLogs}
          remediation:
            rolePolicyFile: custom-config-rules/elb-logging-enabled-remediation-role.json
            automatic: true
            targetId: "{{ AcceleratorPrefix }}-SSM-ELB-Enable-Logging"
            retryAttemptSeconds: 60
            maximumAutomaticAttempts: 5
            parameters:
              - name: LoadBalancerArn
                value: RESOURCE_ID
                type: String
              - name: LogDestination
                value: ${ACCEL_LOOKUP::Bucket:elbLogs}
                type: StringList
    - deploymentTargets:
        ##  Section for config rules across all OUs except Sandbox + Management Account
        ## Rules not supported in ap-northeast-3 AND ca-west-1
        organizationalUnits:
          - Security
          - Infrastructure
          - Central
          - Dev
          - Test
          - Prod
          - UnClass
        accounts:
          - Management
        excludedRegions:
          - ap-northeast-3
          - ca-west-1
      rules:
        - name: "{{ AcceleratorPrefix }}-sagemaker-notebook-instance-kms-key-configured"
          identifier: SAGEMAKER_NOTEBOOK_INSTANCE_KMS_KEY_CONFIGURED
        - name: "{{ AcceleratorPrefix }}-dynamodb-in-backup-plan"
          identifier: DYNAMODB_IN_BACKUP_PLAN
        - name: "{{ AcceleratorPrefix }}-sagemaker-endpoint-configuration-kms-key-configured"
          identifier: SAGEMAKER_ENDPOINT_CONFIGURATION_KMS_KEY_CONFIGURED
        - name: "{{ AcceleratorPrefix }}-ebs-in-backup-plan"
          identifier: EBS_IN_BACKUP_PLAN
        - name: "{{ AcceleratorPrefix }}-rds-in-backup-plan"
          identifier: RDS_IN_BACKUP_PLAN
        - name: "{{ AcceleratorPrefix }}-securityhub-enabled"
          identifier: SECURITYHUB_ENABLED
        - name: "{{ AcceleratorPrefix }}-internet-gateway-authorized-vpc-only"
          complianceResourceTypes:
            - AWS::EC2::InternetGateway
          identifier: INTERNET_GATEWAY_AUTHORIZED_VPC_ONLY
        - name: "{{ AcceleratorPrefix }}-dynamodb-table-encrypted-kms"
          complianceResourceTypes:
            - AWS::DynamoDB::Table
          identifier: DYNAMODB_TABLE_ENCRYPTED_KMS
        - name: "{{ AcceleratorPrefix }}-guardduty-non-archived-findings"
          inputParameters:
            daysHighSev: "1"
            daysLowSev: "30"
            daysMediumSev: "7"
          identifier: GUARDDUTY_NON_ARCHIVED_FINDINGS
    - deploymentTargets:
        ##  Section for config rules across all OUs except Sandbox + Management Account
        ## Rules not supported in ap-northeast-3 ONLY
        organizationalUnits:
          - Security
          - Infrastructure
          - Central
          - Dev
          - Test
          - Prod
          - UnClass
        accounts:
          - Management
        excludedRegions:
          - ap-northeast-3
      rules:
        - name: "{{ AcceleratorPrefix }}-cloudtrail-security-trail-enabled"
          identifier: CLOUDTRAIL_SECURITY_TRAIL_ENABLED
        - name: "{{ AcceleratorPrefix }}-ec2-instance-detailed-monitoring-enabled"
          complianceResourceTypes:
            - AWS::EC2::Instance
          identifier: EC2_INSTANCE_DETAILED_MONITORING_ENABLED
        - name: "{{ AcceleratorPrefix }}-ec2-instances-in-vpc"
          complianceResourceTypes:
            - AWS::EC2::Instance
          identifier: INSTANCES_IN_VPC
        - name: "{{ AcceleratorPrefix }}-vpc-sg-open-only-to-authorized-ports"
          inputParameters:
            authorizedTcpPorts: "443"
            authorizedUdpPorts: "1020-1025"
          complianceResourceTypes:
            - AWS::EC2::SecurityGroup
          identifier: VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS
    - deploymentTargets:
        ##  Section for config rules across all OUs except Sandbox + Management Account
        ## Rules not supported in ca-west-1 ONLY
        organizationalUnits:
          - UnClass
          - Security
          - Prod
          - Dev
          - Test
          - Central
          - Infrastructure
        accounts:
          - Management
        excludedRegions:
          - ca-west-1
      rules:
        - name: "{{ AcceleratorPrefix }}-redshift-cluster-configuration-check"
          inputParameters:
            clusterDbEncrypted: "TRUE"
            loggingEnabled: "TRUE"
          complianceResourceTypes:
            - AWS::Redshift::Cluster
          identifier: REDSHIFT_CLUSTER_CONFIGURATION_CHECK
        - name: "{{ AcceleratorPrefix }}-s3-bucket-policy-grantee-check"
          complianceResourceTypes:
            - AWS::S3::Bucket
          identifier: S3_BUCKET_POLICY_GRANTEE_CHECK
        - name: "{{ AcceleratorPrefix }}-iam-user-group-membership-check"
          complianceResourceTypes:
            - AWS::IAM::User
          identifier: IAM_USER_GROUP_MEMBERSHIP_CHECK
        - name: "{{ AcceleratorPrefix }}-cloudtrail-s3-dataevents-enabled"
          identifier: CLOUDTRAIL_S3_DATAEVENTS_ENABLED
        - name: "{{ AcceleratorPrefix }}-iam-group-has-users-check"
          complianceResourceTypes:
            - AWS::IAM::Group
          identifier: IAM_GROUP_HAS_USERS_CHECK
        - name: "{{ AcceleratorPrefix }}-api-gw-cache-enabled-and-encrypted"
          complianceResourceTypes:
            - AWS::ApiGateway::Stage
          identifier: API_GW_CACHE_ENABLED_AND_ENCRYPTED
        - name: "{{ AcceleratorPrefix }}-ec2-volume-inuse-check"
          inputParameters:
            deleteOnTermination: "TRUE"
          complianceResourceTypes:
            - AWS::EC2::Volume
          identifier: EC2_VOLUME_INUSE_CHECK
        - name: "{{ AcceleratorPrefix }}-emr-kerberos-enabled"
          identifier: EMR_KERBEROS_ENABLED
cloudWatch:
  metricSets:
    - regions:
        - "{{AcceleratorHomeRegion}}"
      deploymentTargets:
        accounts:
          - Management
      metrics:
        # CIS 1.1 – Avoid the use of the "root" account ; CIS 3.3 – Ensure a log metric filter and alarm exist for usage of "root" account
        - filterName: "{{ AcceleratorPrefix }}-RootAccountMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: '{$.userIdentity.type="Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType !="AwsServiceEvent"}'
          metricNamespace: CloudTrailMetrics
          metricName: RootAccount
          metricValue: "1"
        # CIS 3.1 – Ensure a log metric filter and alarm exist for unauthorized API calls
        - filterName: "{{ AcceleratorPrefix }}-UnauthorizedAPICallsMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: '{($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")}'
          metricNamespace: CloudTrailMetrics
          metricName: UnauthorizedAPICalls
          metricValue: "1"
        # CIS 3.2 – Ensure a log metric filter and alarm exist for AWS Management Console sign-in without MFA
        - filterName: "{{ AcceleratorPrefix }}-ConsoleSigninWithoutMFAMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: '{($.eventName = "ConsoleLogin") && ($.additionalEventData.MFAUsed != "Yes") && ($.userIdentity.type = "IAMUser") && ($.responseElements.ConsoleLogin = "Success")}'
          metricNamespace: CloudTrailMetrics
          metricName: ConsoleSigninWithoutMFA
          metricValue: "1"
        # CIS 3.4 – Ensure a log metric filter and alarm exist for IAM policy changes
        - filterName: "{{ AcceleratorPrefix }}-IAMPolicyChangesMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{($.eventName=DeleteGroupPolicy) || ($.eventName=DeleteRolePolicy) || ($.eventName=DeleteUserPolicy) || ($.eventName=PutGroupPolicy) || ($.eventName=PutRolePolicy) || ($.eventName=PutUserPolicy) || ($.eventName=CreatePolicy) || ($.eventName=DeletePolicy) || ($.eventName=CreatePolicyVersion) || ($.eventName=DeletePolicyVersion) || ($.eventName=AttachRolePolicy) || ($.eventName=DetachRolePolicy) || ($.eventName=AttachUserPolicy) || ($.eventName=DetachUserPolicy) || ($.eventName=AttachGroupPolicy) || ($.eventName=DetachGroupPolicy)}"
          metricNamespace: CloudTrailMetrics
          metricName: IAMPolicyChanges
          metricValue: "1"
        # CIS 3.5 – Ensure a log metric filter and alarm exist for CloudTrail configuration changes
        - filterName: "{{ AcceleratorPrefix }}-CloudTrailChangesMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{($.eventName=CreateTrail) || ($.eventName=UpdateTrail) || ($.eventName=DeleteTrail) || ($.eventName=StartLogging) || ($.eventName=StopLogging)}"
          metricNamespace: CloudTrailMetrics
          metricName: CloudTrailChanges
          metricValue: "1"
        # CIS 3.6 – Ensure a log metric filter and alarm exist for AWS Management Console authentication failures
        - filterName: "{{ AcceleratorPrefix }}-ConsoleAuthenticationFailureMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: '{($.eventName=ConsoleLogin) && ($.errorMessage="Failed authentication")}'
          metricNamespace: CloudTrailMetrics
          metricName: ConsoleAuthenticationFailure
          metricValue: "1"
        # CIS 3.7 – Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs
        - filterName: "{{ AcceleratorPrefix }}-DisableOrDeleteCMKMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{($.eventSource=kms.amazonaws.com) && (($.eventName=DisableKey) || ($.eventName=ScheduleKeyDeletion))}"
          metricNamespace: CloudTrailMetrics
          metricName: DisableOrDeleteCMK
          metricValue: "1"
        # CIS 3.8 – Ensure a log metric filter and alarm exist for S3 bucket policy changes
        - filterName: "{{ AcceleratorPrefix }}-S3BucketPolicyChangesMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{($.eventSource=s3.amazonaws.com) && (($.eventName=PutBucketAcl) || ($.eventName=PutBucketPolicy) || ($.eventName=PutBucketCors) || ($.eventName=PutBucketLifecycle) || ($.eventName=PutBucketReplication) || ($.eventName=DeleteBucketPolicy) || ($.eventName=DeleteBucketCors) || ($.eventName=DeleteBucketLifecycle) || ($.eventName=DeleteBucketReplication))}"
          metricNamespace: CloudTrailMetrics
          metricName: S3BucketPolicyChanges
          metricValue: "1"
        # CIS 3.9 – Ensure a log metric filter and alarm exist for AWS Config configuration changes
        - filterName: "{{ AcceleratorPrefix }}-AWSConfigChangesMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{($.eventSource=config.amazonaws.com) && (($.eventName=StopConfigurationRecorder) || ($.eventName=DeleteDeliveryChannel) || ($.eventName=PutDeliveryChannel) || ($.eventName=PutConfigurationRecorder))}"
          metricNamespace: CloudTrailMetrics
          metricName: AWSConfigChanges
          metricValue: "1"
        # CIS 3.10 – Ensure a log metric filter and alarm exist for security group changes
        - filterName: "{{ AcceleratorPrefix }}-SecurityGroupChangesMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{($.eventName=AuthorizeSecurityGroupIngress) || ($.eventName=AuthorizeSecurityGroupEgress) || ($.eventName=RevokeSecurityGroupIngress) || ($.eventName=RevokeSecurityGroupEgress) || ($.eventName=CreateSecurityGroup) || ($.eventName=DeleteSecurityGroup)}"
          metricNamespace: CloudTrailMetrics
          metricName: SecurityGroupChanges
          metricValue: "1"
        # CIS 3.11 – Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)
        - filterName: "{{ AcceleratorPrefix }}-NetworkACLChangesMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{($.eventName=CreateNetworkAcl) || ($.eventName=CreateNetworkAclEntry) || ($.eventName=DeleteNetworkAcl) || ($.eventName=DeleteNetworkAclEntry) || ($.eventName=ReplaceNetworkAclEntry) || ($.eventName=ReplaceNetworkAclAssociation)}"
          metricNamespace: CloudTrailMetrics
          metricName: NetworkACLChanges
          metricValue: "1"
        # CIS 3.12 – Ensure a log metric filter and alarm exist for changes to network gateways
        - filterName: "{{ AcceleratorPrefix }}-NetworkGatewayChangesMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{($.eventName=CreateCustomerGateway) || ($.eventName=DeleteCustomerGateway) || ($.eventName=AttachInternetGateway) || ($.eventName=CreateInternetGateway) || ($.eventName=DeleteInternetGateway) || ($.eventName=DetachInternetGateway)}"
          metricNamespace: CloudTrailMetrics
          metricName: NetworkGatewayChanges
          metricValue: "1"
        # CIS 3.13 – Ensure a log metric filter and alarm exist for route table changes
        - filterName: "{{ AcceleratorPrefix }}-RouteTableChangesMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{($.eventName=CreateRoute) || ($.eventName=CreateRouteTable) || ($.eventName=ReplaceRoute) || ($.eventName=ReplaceRouteTableAssociation) || ($.eventName=DeleteRouteTable) || ($.eventName=DeleteRoute) || ($.eventName=DisassociateRouteTable)}"
          metricNamespace: CloudTrailMetrics
          metricName: RouteTableChanges
          metricValue: "1"
        # CIS 3.14 – Ensure a log metric filter and alarm exist for VPC changes
        - filterName: "{{ AcceleratorPrefix }}-VPCChangesMetricFilter"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{($.eventName=CreateVpc) || ($.eventName=DeleteVpc) || ($.eventName=ModifyVpcAttribute) || ($.eventName=AcceptVpcPeeringConnection) || ($.eventName=CreateVpcPeeringConnection) || ($.eventName=DeleteVpcPeeringConnection) || ($.eventName=RejectVpcPeeringConnection) || ($.eventName=AttachClassicLinkVpc) || ($.eventName=DetachClassicLinkVpc) || ($.eventName=DisableVpcClassicLink) || ($.eventName=EnableVpcClassicLink)}"
          metricNamespace: CloudTrailMetrics
          metricName: VPCChanges
          metricValue: "1"
        - filterName: "{{ AcceleratorPrefix }}-Ec2InstanceChangeMetric"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{ ($.eventName = RunInstances) || ($.eventName = RebootInstances)|| ($.eventName = StartInstances) || ($.eventName = StopInstances) || ($.eventName= TerminateInstances) }"
          metricNamespace: CloudTrailMetrics
          metricName: EC2InstanceEventCount
          metricValue: "1"
        - filterName: "{{ AcceleratorPrefix }}-Ec2LargeInstanceChangeMetric"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{ (($.eventName = RunInstances) || ($.eventName = RebootInstances)|| ($.eventName = StartInstances) || ($.eventName = StopInstances) || ($.eventName= TerminateInstances)) && (($.requestParameters.instanceType= *.32xlarge) || ($.requestParameters.instanceType= *.24xlarge) || ($.requestParameters.instanceType= *.18xlarge) || ($.requestParameters.instanceType= *.16xlarge) || ($.requestParameters.instanceType= *.12xlarge) || ($.requestParameters.instanceType= *.10xlarge) || ($.requestParameters.instanceType= *.9xlarge) || ($.requestParameters.instanceType= *.8xlarge) || ($.requestParameters.instanceType = *.4xlarge)) }"
          metricNamespace: CloudTrailMetrics
          metricName: EC2LargeInstanceEventCount
          metricValue: "1"
        - filterName: "{{ AcceleratorPrefix }}-SSOAuthUnapprovedIPMetric"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{ ($.eventSource=sso.amazonaws.com) && ($.eventName=Authenticate) && ($.sourceIPAddress != 10.10.10.*) }" # Needs Updating
          metricNamespace: CloudTrailMetrics
          metricName: SSOAuthUnapprovedIPCount
          metricValue: "1"
        - filterName: "{{ AcceleratorPrefix }}-IAMAuthUnapprovedIPMetric"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{ ($.eventName=ConsoleLogin) && ($.userIdentity.type=IAMUser) && ($.sourceIPAddress != 10.10.10.*) }" # Needs Updating
          metricNamespace: CloudTrailMetrics
          metricName: IAMAuthUnapprovedIPCount
          metricValue: "1"
        - filterName: "{{ AcceleratorPrefix }}-UnencryptedFilesystemCreatedMetric"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{ ($.eventName = CreateFileSystem) && ($.responseElements.encrypted IS FALSE) }"
          metricNamespace: CloudTrailMetrics
          metricName: UnencryptedFilesystemCreatedCount
          metricValue: "1"
        - filterName: "{{ AcceleratorPrefix }}-IgnoreAuthorizationFailureMetric"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{($.errorCode=\"*UnauthorizedOperation\") || ($.errorCode=\"AccessDenied*\")}"
          metricNamespace: CloudTrailMetrics
          metricName: IgnoreAuthorizationFailureCount
          metricValue: "1"
        - filterName: "{{ AcceleratorPrefix }}-IgnoreConsoleSignInWithoutMfaMetric"
          logGroupName: {{ CloudTrailLogGroup }}
          filterPattern: "{($.eventName=\"ConsoleLogin\") && ($.additionalEventData.MFAUsed !=\"Yes\")}"
          metricNamespace: CloudTrailMetrics
          metricName: IgnoreConsoleSignInWithoutMfaCount
          metricValue: "1"
  alarmSets:
    - regions:
        - {{ AcceleratorHomeRegion }}
      deploymentTargets:
        accounts:
          - Management
      alarms:
        # CIS 1.1 – Avoid the use of the "root" account ; CIS 3.3 – Ensure a log metric filter and alarm exist for usage of "root" account
        - alarmName: "{{ AcceleratorPrefix }}-CIS-1.1-RootAccountUsage"
          alarmDescription: Alarm for usage of "root" account
          snsTopicName: SecurityLow
          metricName: RootAccount
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.1 – Ensure a log metric filter and alarm exist for unauthorized API calls
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.1-UnauthorizedAPICalls"
          alarmDescription: Alarm for unauthorized API calls
          snsTopicName: SecurityLow
          metricName: UnauthorizedAPICalls
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Average
          threshold: 5
          treatMissingData: notBreaching
        # CIS 3.2 – Ensure a log metric filter and alarm exist for AWS Management Console sign-in without MFA
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.2-ConsoleSigninWithoutMFA"
          alarmDescription: Alarm for AWS Management Console sign-in without MFA
          snsTopicName: SecurityHigh
          metricName: ConsoleSigninWithoutMFA
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.4-IAMPolicyChanges"
          alarmDescription: Alarm for IAM policy changes
          snsTopicName: SecurityMedium
          metricName: IAMPolicyChanges
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Average
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.5 – Ensure a log metric filter and alarm exist for CloudTrail configuration changes
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.5-CloudTrailChanges"
          alarmDescription: Alarm for CloudTrail configuration changes
          snsTopicName: SecurityHigh
          metricName: CloudTrailChanges
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.6 – Ensure a log metric filter and alarm exist for AWS Management Console authentication failures
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.6-ConsoleAuthenticationFailure"
          alarmDescription: Alarm exist for AWS Management Console authentication failures
          snsTopicName: SecurityLow
          metricName: ConsoleAuthenticationFailure
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.7 – Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.7-DisableOrDeleteCMK"
          alarmDescription: Alarm for disabling or scheduled deletion of customer created CMKs
          snsTopicName: SecurityHigh
          metricName: DisableOrDeleteCMK
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.8 – Ensure a log metric filter and alarm exist for S3 bucket policy changes
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.8-S3BucketPolicyChanges"
          alarmDescription: Alarm for S3 bucket policy changes
          snsTopicName: SecurityMedium
          metricName: S3BucketPolicyChanges
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Average
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.9 – Ensure a log metric filter and alarm exist for AWS Config configuration changes
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.9-AWSConfigChanges"
          alarmDescription: Alarm for AWS Config configuration changes
          snsTopicName: SecurityHigh
          metricName: AWSConfigChanges
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.10 – Ensure a log metric filter and alarm exist for security group changes
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.10-SecurityGroupChanges"
          alarmDescription: Alarm for security group changes
          snsTopicName: SecurityLow
          metricName: SecurityGroupChanges
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.11 – Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.11-NetworkACLChanges"
          alarmDescription: Alarm for changes to Network Access Control Lists (NACL)
          snsTopicName: SecurityMedium
          metricName: NetworkACLChanges
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.12 – Ensure a log metric filter and alarm exist for changes to network gateways
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.12-NetworkGatewayChanges"
          alarmDescription: Alarm for changes to network gateways
          snsTopicName: SecurityMedium
          metricName: NetworkGatewayChanges
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.13 – Ensure a log metric filter and alarm exist for route table changes
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.13-RouteTableChanges"
          alarmDescription: Alarm for route table changes
          snsTopicName: SecurityMedium
          metricName: RouteTableChanges
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Average
          threshold: 1
          treatMissingData: notBreaching
        # CIS 3.14 – Ensure a log metric filter and alarm exist for VPC changes
        - alarmName: "{{ AcceleratorPrefix }}-CIS-3.14-VPCChanges"
          alarmDescription: Alarm for VPC changes
          snsTopicName: SecurityMedium
          metricName: VPCChanges
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        - alarmName: "{{ AcceleratorPrefix }}-AWS-EC2-Instances-Changed"
          alarmDescription: Alarms when one or more API calls are made to create, terminate, start, stop or reboot any EC2 instance (in any account, any region of your AWS Organization).
          snsTopicName: SecurityLow
          metricName: EC2InstanceEventCount
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        - alarmName: "{{ AcceleratorPrefix }}-AWS-EC2-Large-Instance-Changed"
          alarmDescription: Alarms when one or more API calls are made to create, terminate, start, stop or reboot a 4x, 8x, 9x, 10x, 12x, 16x, 18x, 24x, 32x-large EC2 instance (in any account, any region of your AWS Organization).
          snsTopicName: SecurityMedium
          metricName: EC2LargeInstanceEventCount
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        - alarmName: "{{ AcceleratorPrefix }}-AWS-SSO-Authentication-From-Unapproved-IP"
          alarmDescription: Alarms when someone authenticates using AWS SSO from an unauthorized IP address range.
          snsTopicName: SecurityHigh
          metricName: SSOAuthUnapprovedIPCount
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        - alarmName: "{{ AcceleratorPrefix }}-AWS-IAM-Authentication-From-Unapproved-IP"
          alarmDescription: Alarms when someone authenticates using AWS IAM from an unauthorized IP address range.
          snsTopicName: SecurityHigh
          metricName: IAMAuthUnapprovedIPCount
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        - alarmName: "{{ AcceleratorPrefix }}-AWS-Unencrypted-Filesystem-Created"
          alarmDescription: Alarms when one or more API calls are made to create an Unencrypted filesystem (i.e. EFS) (in any account, any region of your AWS Organization).
          snsTopicName: SecurityHigh
          metricName: UnencryptedFilesystemCreatedCount
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        - alarmName: "{{ AcceleratorPrefix }}-IGNORE-AWS-Authorization-Failure"
          alarmDescription: Alarms when one or more unauthorized API calls are made (in any account, any region of your AWS Organization).
          snsTopicName: SecurityIgnore
          metricName: IgnoreAuthorizationFailureCount
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        - alarmName: "{{ AcceleratorPrefix }}-IGNORE-AWS-Console-SignIn-Without-MFA"
          alarmDescription: Alarms when MFA is NOT used to sign into the console with IAM (in any account, any region of your AWS Organization).
          snsTopicName: SecurityIgnore
          metricName: IgnoreConsoleSignInWithoutMfaCount
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
        - alarmName: "{{ AcceleratorPrefix }}-AWS-Console-SignIn-Failure"
          alarmDescription: Alarms when one or more unauthenticated API calls are made to sign into the console (in any account, any region of your AWS Organization).
          snsTopicName: SecurityHigh
          metricName: ConsoleSignInFailureCount
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 3
          treatMissingData: notBreaching
        - alarmName: "{{ AcceleratorPrefix }}-AWS-Authorization-Failure"
          alarmDescription: Alarms when one or more unauthorized API calls are made (in any account, any region of your AWS Organization).
          snsTopicName: SecurityLow
          metricName: AuthorizationFailureCount
          namespace: CloudTrailMetrics
          comparisonOperator: GreaterThanOrEqualToThreshold
          evaluationPeriods: 1
          period: 300
          statistic: Sum
          threshold: 1
          treatMissingData: notBreaching
  logGroups:
    - logGroupName: /AWSAccelerator/rsyslog
      logRetentionInDays: 731
      encryption:
        useLzaManagedKey: true
      deploymentTargets:
        accounts:
          - Operations
keyManagementService:
  keySets: []
